
// Generated by scripts/generate_ionicsvelte_typings.js
declare namespace svelte.JSX {

  interface IntrinsicElements {

    'ion-accordion': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the accordion cannot be interacted with.
      */
      "disabled"?: boolean;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the accordion cannot be interacted with, but does not alter the opacity.
      */
      "readonly"?: boolean;

      /**
      * The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
      */
      "toggleIcon"?: string;

      /**
      * The slot inside of `ion-item` to place the toggle icon. Defaults to `'end'`.
      */
      "toggleIconSlot"?: "end" | "start";

      /**
      * The value of the accordion. Defaults to an autogenerated value.
      */
      "value"?: string;
    }

    'ion-accordion-group': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, all accordions inside of the accordion group will animate when expanding or collapsing.
      */
      "animated"?: boolean;

      /**
      * If `true`, the accordion group cannot be interacted with.
      */
      "disabled"?: boolean;

      /**
      * Describes the expansion behavior for each accordion. Possible values are `"compact"` and `"inset"`. Defaults to `"compact"`.
      */
      "expand"?: "compact" | "inset";

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the accordion group can have multiple accordion components expanded at the same time.
      */
      "multiple"?: boolean | undefined;

      /**
      * If `true`, the accordion group cannot be interacted with, but does not alter the opacity.
      */
      "readonly"?: boolean;

      /**
      * The value of the accordion group.
      */
      "value"?: null | string | string[] | undefined;

      /**
      * (event : AccordionGroupChangeEventDetail<any>) => void :  Emitted when the value property has changed.
      */
      "on:ionChange"?: (event: AccordionGroupChangeEventDetail<any>) => void;
    }

    'ion-action-sheet': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the action sheet will animate.
      */
      "animated"?: boolean;

      /**
      * If `true`, the action sheet will be dismissed when the backdrop is clicked.
      */
      "backdropDismiss"?: boolean;

      /**
      * An array of buttons for the action sheet.
      */
      "buttons"?: (string | ActionSheetButton<any>)[];

      /**
      * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
      */
      "cssClass"?: string | string[] | undefined;

      /**
      * Animation to use when the action sheet is presented.
      */
      "enterAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * Title for the action sheet.
      */
      "header"?: string | undefined;

      /**
      * Additional attributes to pass to the action sheet.
      */
      "htmlAttributes"?: undefined | { [key: string]: any; };

      /**
      * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
      */
      "keyboardClose"?: boolean;

      /**
      * Animation to use when the action sheet is dismissed.
      */
      "leaveAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Subtitle for the action sheet.
      */
      "subHeader"?: string | undefined;

      /**
      * If `true`, the action sheet will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the alert has dismissed.
      */
      "on:ionActionSheetDidDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the alert has presented.
      */
      "on:ionActionSheetDidPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the alert has dismissed.
      */
      "on:ionActionSheetWillDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the alert has presented.
      */
      "on:ionActionSheetWillPresent"?: (event: void) => void;
    }

    'ion-alert': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the alert will animate.
      */
      "animated"?: boolean;

      /**
      * If `true`, the alert will be dismissed when the backdrop is clicked.
      */
      "backdropDismiss"?: boolean;

      /**
      * Array of buttons to be added to the alert.
      */
      "buttons"?: (string | AlertButton)[];

      /**
      * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
      */
      "cssClass"?: string | string[] | undefined;

      /**
      * Animation to use when the alert is presented.
      */
      "enterAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The main title in the heading of the alert.
      */
      "header"?: string | undefined;

      /**
      * Additional attributes to pass to the alert.
      */
      "htmlAttributes"?: undefined | { [key: string]: any; };

      /**
      * Array of input to show in the alert.
      */
      "inputs"?: AlertInput[];

      /**
      * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
      */
      "keyboardClose"?: boolean;

      /**
      * Animation to use when the alert is dismissed.
      */
      "leaveAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The main message to be displayed in the alert. `message` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
      */
      "message"?: IonicSafeString | string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The subtitle in the heading of the alert. Displayed under the title.
      */
      "subHeader"?: string | undefined;

      /**
      * If `true`, the alert will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the alert has dismissed.
      */
      "on:ionAlertDidDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the alert has presented.
      */
      "on:ionAlertDidPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the alert has dismissed.
      */
      "on:ionAlertWillDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the alert has presented.
      */
      "on:ionAlertWillPresent"?: (event: void) => void;
    }

    'ion-app': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;
    }

    'ion-avatar': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;
    }

    'ion-back-button': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The url to navigate back to by default when there is no history.
      */
      "defaultHref"?: string | undefined;

      /**
      * If `true`, the user cannot interact with the button.
      */
      "disabled"?: boolean;

      /**
      * The built-in named SVG icon name or the exact `src` of an SVG file to use for the back button.
      */
      "icon"?: null | string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * When using a router, it specifies the transition animation when navigating to another page.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The text to display in the back button.
      */
      "text"?: null | string | undefined;

      /**
      * The type of the button.
      */
      "type"?: "button" | "reset" | "submit";
    }

    'ion-backdrop': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the backdrop will stop propagation on tap.
      */
      "stopPropagation"?: boolean;

      /**
      * If `true`, the backdrop will can be clicked and will emit the `ionBackdropTap` event.
      */
      "tappable"?: boolean;

      /**
      * If `true`, the backdrop will be visible.
      */
      "visible"?: boolean;

      /**
      * (event : void) => void :  Emitted when the backdrop is tapped.
      */
      "on:ionBackdropTap"?: (event: void) => void;
    }

    'ion-badge': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-breadcrumb': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the breadcrumb will take on a different look to show that it is the currently active breadcrumb. Defaults to `true` for the last breadcrumb if it is not set on any.
      */
      "active"?: boolean;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the breadcrumb.
      */
      "disabled"?: boolean;

      /**
      * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
      */
      "download"?: string | undefined;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * When using a router, it specifies the transition animation when navigating to another page using `href`.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * When using a router, it specifies the transition direction when navigating to another page using `href`.
      */
      "routerDirection"?: "back" | "forward" | "root";

      /**
      * If true, show a separator between this breadcrumb and the next. Defaults to `true` for all breadcrumbs except the last.
      */
      "separator"?: boolean | undefined;

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;

      /**
      * (event : void) => void :  Emitted when the breadcrumb loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the breadcrumb has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-breadcrumbs': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The number of breadcrumbs to show after the collapsed indicator. If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`, the breadcrumbs will not be collapsed.
      */
      "itemsAfterCollapse"?: number;

      /**
      * The number of breadcrumbs to show before the collapsed indicator. If `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`, the breadcrumbs will not be collapsed.
      */
      "itemsBeforeCollapse"?: number;

      /**
      * The maximum number of breadcrumbs to show before collapsing.
      */
      "maxItems"?: number | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * (event : BreadcrumbCollapsedClickEventDetail) => void :  Emitted when the collapsed indicator is clicked on.
      */
      "on:ionCollapsedClick"?: (event: BreadcrumbCollapsedClickEventDetail) => void;
    }

    'ion-button': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The type of button.
      */
      "buttonType"?: string;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the button.
      */
      "disabled"?: boolean;

      /**
      * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
      */
      "download"?: string | undefined;

      /**
      * Set to `"block"` for a full-width button or to `"full"` for a full-width button with square corners and no left or right borders.
      */
      "expand"?: "block" | "full" | undefined;

      /**
      * Set to `"clear"` for a transparent button that resembles a flat button, to `"outline"` for a transparent button with a border, or to `"solid"` for a button with a filled background. The default fill is `"solid"` except inside of a toolbar, where the default is `"clear"`.
      */
      "fill"?: "clear" | "default" | "outline" | "solid" | undefined;

      /**
      * The HTML form element or form element id. Used to submit a form when the button is not a child of the form.
      */
      "form"?: HTMLFormElement | string | undefined;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * When using a router, it specifies the transition animation when navigating to another page using `href`.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * When using a router, it specifies the transition direction when navigating to another page using `href`.
      */
      "routerDirection"?: "back" | "forward" | "root";

      /**
      * Set to `"round"` for a button with more rounded corners.
      */
      "shape"?: "round" | undefined;

      /**
      * Set to `"small"` for a button with less height and padding, to `"default"` for a button with the default height and padding, or to `"large"` for a button with more height and padding. By default the size is unset, unless the button is inside of an item, where the size is `"small"` by default. Set the size to `"default"` inside of an item to make it a standard size button.
      */
      "size"?: "default" | "large" | "small" | undefined;

      /**
      * If `true`, activates a button with a heavier font weight.
      */
      "strong"?: boolean;

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;

      /**
      * The type of the button.
      */
      "type"?: "button" | "reset" | "submit";

      /**
      * (event : void) => void :  Emitted when the button loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the button has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-buttons': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If true, buttons will disappear when its parent toolbar has fully collapsed if the toolbar is not the first toolbar. If the toolbar is the first toolbar, the buttons will be hidden and will only be shown once all toolbars have fully collapsed.  Only applies in `ios` mode with `collapse` set to `true` on `ion-header`.  Typically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)
      */
      "collapse"?: boolean;
    }

    'ion-card': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, a button tag will be rendered and the card will be tappable.
      */
      "button"?: boolean;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the card.
      */
      "disabled"?: boolean;

      /**
      * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
      */
      "download"?: string | undefined;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * When using a router, it specifies the transition animation when navigating to another page using `href`.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * When using a router, it specifies the transition direction when navigating to another page using `href`.
      */
      "routerDirection"?: "back" | "forward" | "root";

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;

      /**
      * The type of the button. Only used when an `onclick` or `button` property is present.
      */
      "type"?: "button" | "reset" | "submit";
    }

    'ion-card-content': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-card-header': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the card header will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;
    }

    'ion-card-subtitle': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-card-title': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-checkbox': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the checkbox is selected.
      */
      "checked"?: boolean;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the checkbox.
      */
      "disabled"?: boolean;

      /**
      * If `true`, the checkbox will visually appear as indeterminate.
      */
      "indeterminate"?: boolean;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
      */
      "value"?: any;

      /**
      * (event : void) => void :  Emitted when the checkbox loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : CheckboxChangeEventDetail<any>) => void :  Emitted when the checked property has changed.
      */
      "on:ionChange"?: (event: CheckboxChangeEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted when the checkbox has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-chip': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the chip.
      */
      "disabled"?: boolean;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Display an outline style button.
      */
      "outline"?: boolean;
    }

    'ion-col': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The amount to offset the column, in terms of how many columns it should shift to the end of the total available.
      */
      "offset"?: string | undefined;

      /**
      * The amount to offset the column for lg screens, in terms of how many columns it should shift to the end of the total available.
      */
      "offsetLg"?: string | undefined;

      /**
      * The amount to offset the column for md screens, in terms of how many columns it should shift to the end of the total available.
      */
      "offsetMd"?: string | undefined;

      /**
      * The amount to offset the column for sm screens, in terms of how many columns it should shift to the end of the total available.
      */
      "offsetSm"?: string | undefined;

      /**
      * The amount to offset the column for xl screens, in terms of how many columns it should shift to the end of the total available.
      */
      "offsetXl"?: string | undefined;

      /**
      * The amount to offset the column for xs screens, in terms of how many columns it should shift to the end of the total available.
      */
      "offsetXs"?: string | undefined;

      /**
      * The amount to pull the column, in terms of how many columns it should shift to the start of the total available.
      */
      "pull"?: string | undefined;

      /**
      * The amount to pull the column for lg screens, in terms of how many columns it should shift to the start of the total available.
      */
      "pullLg"?: string | undefined;

      /**
      * The amount to pull the column for md screens, in terms of how many columns it should shift to the start of the total available.
      */
      "pullMd"?: string | undefined;

      /**
      * The amount to pull the column for sm screens, in terms of how many columns it should shift to the start of the total available.
      */
      "pullSm"?: string | undefined;

      /**
      * The amount to pull the column for xl screens, in terms of how many columns it should shift to the start of the total available.
      */
      "pullXl"?: string | undefined;

      /**
      * The amount to pull the column for xs screens, in terms of how many columns it should shift to the start of the total available.
      */
      "pullXs"?: string | undefined;

      /**
      * The amount to push the column, in terms of how many columns it should shift to the end of the total available.
      */
      "push"?: string | undefined;

      /**
      * The amount to push the column for lg screens, in terms of how many columns it should shift to the end of the total available.
      */
      "pushLg"?: string | undefined;

      /**
      * The amount to push the column for md screens, in terms of how many columns it should shift to the end of the total available.
      */
      "pushMd"?: string | undefined;

      /**
      * The amount to push the column for sm screens, in terms of how many columns it should shift to the end of the total available.
      */
      "pushSm"?: string | undefined;

      /**
      * The amount to push the column for xl screens, in terms of how many columns it should shift to the end of the total available.
      */
      "pushXl"?: string | undefined;

      /**
      * The amount to push the column for xs screens, in terms of how many columns it should shift to the end of the total available.
      */
      "pushXs"?: string | undefined;

      /**
      * The size of the column, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
      */
      "size"?: string | undefined;

      /**
      * The size of the column for lg screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
      */
      "sizeLg"?: string | undefined;

      /**
      * The size of the column for md screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
      */
      "sizeMd"?: string | undefined;

      /**
      * The size of the column for sm screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
      */
      "sizeSm"?: string | undefined;

      /**
      * The size of the column for xl screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
      */
      "sizeXl"?: string | undefined;

      /**
      * The size of the column for xs screens, in terms of how many columns it should take up out of the total available. If `"auto"` is passed, the column will be the size of its content.
      */
      "sizeXs"?: string | undefined;
    }

    'ion-content': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce. If the content exceeds the bounds of ionContent, nothing will change. Note, the does not disable the system bounce on iOS. That is an OS level setting.
      */
      "forceOverscroll"?: boolean | undefined;

      /**
      * If `true`, the content will scroll behind the headers and footers. This effect can easily be seen by setting the toolbar to transparent.
      */
      "fullscreen"?: boolean;

      /**
      * Because of performance reasons, ionScroll events are disabled by default, in order to enable them and start listening from (ionScroll), set this property to `true`.
      */
      "scrollEvents"?: boolean;

      /**
      * If you want to enable the content scrolling in the X axis, set this property to `true`.
      */
      "scrollX"?: boolean;

      /**
      * If you want to disable the content scrolling in the Y axis, set this property to `false`.
      */
      "scrollY"?: boolean;

      /**
      * (event : ScrollDetail) => void :  Emitted while scrolling. This event is disabled by default. Set `scrollEvents` to `true` to enable.
      */
      "on:ionScroll"?: (event: ScrollDetail) => void;

      /**
      * (event : ScrollBaseDetail) => void :  Emitted when the scroll has ended. This event is disabled by default. Set `scrollEvents` to `true` to enable.
      */
      "on:ionScrollEnd"?: (event: ScrollBaseDetail) => void;

      /**
      * (event : ScrollBaseDetail) => void :  Emitted when the scroll has started. This event is disabled by default. Set `scrollEvents` to `true` to enable.
      */
      "on:ionScrollStart"?: (event: ScrollBaseDetail) => void;
    }

    'ion-datetime': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The text to display on the picker's cancel button.
      */
      "cancelText"?: string;

      /**
      * The text to display on the picker's "Clear" button.
      */
      "clearText"?: string;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * Values used to create the list of selectable days. By default every day is shown for the given month. However, to control exactly which days of the month to display, the `dayValues` input can take a number, an array of numbers, or a string of comma separated numbers. Note that even if the array days have an invalid number for the selected month, like `31` in February, it will correctly not show days which are not valid for the selected month.
      */
      "dayValues"?: number | number[] | string | undefined;

      /**
      * If `true`, the user cannot interact with the datetime.
      */
      "disabled"?: boolean;

      /**
      * The text to display on the picker's "Done" button.
      */
      "doneText"?: string;

      /**
      * The first day of the week to use for `ion-datetime`. The default value is `0` and represents Sunday.
      */
      "firstDayOfWeek"?: number;

      /**
      * The hour cycle of the `ion-datetime`. If no value is set, this is specified by the current locale.
      */
      "hourCycle"?: "h12" | "h23" | undefined;

      /**
      * Values used to create the list of selectable hours. By default the hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However, to control exactly which hours to display, the `hourValues` input can take a number, an array of numbers, or a string of comma separated numbers.
      */
      "hourValues"?: number | number[] | string | undefined;

      /**
      * Returns if an individual date (calendar day) is enabled or disabled.  If `true`, the day will be enabled/interactive. If `false`, the day will be disabled/non-interactive.  The function accepts an ISO 8601 date string of a given day. By default, all days are enabled. Developers can use this function to write custom logic to disable certain days.  The function is called for each rendered calendar day, for the previous, current and next month. Custom implementations should be optimized for performance to avoid jank.
      */
      "isDateEnabled"?: ((dateIsoString: string) => boolean) | undefined;

      /**
      * The locale to use for `ion-datetime`. This impacts month and day name formatting. The `'default'` value refers to the default locale set by your device.
      */
      "locale"?: string;

      /**
      * The maximum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the maximum could just be the year, such as `1994`. Defaults to the end of this year.
      */
      "max"?: string | undefined;

      /**
      * The minimum datetime allowed. Value must be a date string following the [ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime), such as `1996-12-19`. The format does not have to be specific to an exact datetime. For example, the minimum could just be the year, such as `1994`. Defaults to the beginning of the year, 100 years ago from today.
      */
      "min"?: string | undefined;

      /**
      * Values used to create the list of selectable minutes. By default the minutes range from `0` to `59`. However, to control exactly which minutes to display, the `minuteValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if the minute selections should only be every 15 minutes, then this input value would be `minuteValues="0,15,30,45"`.
      */
      "minuteValues"?: number | number[] | string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Values used to create the list of selectable months. By default the month values range from `1` to `12`. However, to control exactly which months to display, the `monthValues` input can take a number, an array of numbers, or a string of comma separated numbers. For example, if only summer months should be shown, then this input value would be `monthValues="6,7,8"`. Note that month numbers do *not* have a zero-based index, meaning January's value is `1`, and December's is `12`.
      */
      "monthValues"?: number | number[] | string | undefined;

      /**
      * If `true`, multiple dates can be selected at once. Only applies to `presentation="date"` and `preferWheel="false"`.
      */
      "multiple"?: boolean;

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * If `true`, a wheel picker will be rendered instead of a calendar grid where possible. If `false`, a calendar grid will be rendered instead of a wheel picker where possible.  A wheel picker can be rendered instead of a grid when `presentation` is one of the following values: `'date'`, `'date-time'`, or `'time-date'`.  A wheel picker will always be rendered regardless of the `preferWheel` value when `presentation` is one of the following values: `'time'`, `'month'`, `'month-year'`, or `'year'`.
      */
      "preferWheel"?: boolean;

      /**
      * Which values you want to select. `'date'` will show a calendar picker to select the month, day, and year. `'time'` will show a time picker to select the hour, minute, and (optionally) AM/PM. `'date-time'` will show the date picker first and time picker second. `'time-date'` will show the time picker first and date picker second.
      */
      "presentation"?: "date" | "date-time" | "month" | "month-year" | "time" | "time-date" | "year";

      /**
      * If `true`, the datetime appears normal but is not interactive.
      */
      "readonly"?: boolean;

      /**
      * If `true`, a "Clear" button will be rendered alongside the default "Cancel" and "OK" buttons at the bottom of the `ion-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.
      */
      "showClearButton"?: boolean;

      /**
      * If `true`, the default "Cancel" and "OK" buttons will be rendered at the bottom of the `ion-datetime` component. Developers can also use the `button` slot if they want to customize these buttons. If custom buttons are set in the `button` slot then the default buttons will not be rendered.
      */
      "showDefaultButtons"?: boolean;

      /**
      * If `true`, the default "Time" label will be rendered for the time selector of the `ion-datetime` component. Developers can also use the `time-label` slot if they want to customize this label. If a custom label is set in the `time-label` slot then the default label will not be rendered.
      */
      "showDefaultTimeLabel"?: boolean;

      /**
      * If `true`, a header will be shown above the calendar picker. This will include both the slotted title, and the selected date.
      */
      "showDefaultTitle"?: boolean;

      /**
      * If `cover`, the `ion-datetime` will expand to cover the full width of its container. If `fixed`, the `ion-datetime` will have a fixed width.
      */
      "size"?: "cover" | "fixed";

      /**
      * A callback used to format the header text that shows how many dates are selected. Only used if there are 0 or more than 1 selected (i.e. unused for exactly 1). By default, the header text is set to "numberOfDates days".
      */
      "titleSelectedDatesFormatter"?: ((selectedDates: string[]) => string) | undefined;

      /**
      * The value of the datetime as a valid ISO 8601 datetime string. Should be an array of strings if `multiple="true"`.
      */
      "value"?: null | string | string[] | undefined;

      /**
      * Values used to create the list of selectable years. By default the year values range between the `min` and `max` datetime inputs. However, to control exactly which years to display, the `yearValues` input can take a number, an array of numbers, or string of comma separated numbers. For example, to show upcoming and recent leap years, then this input's value would be `yearValues="2024,2020,2016,2012,2008"`.
      */
      "yearValues"?: number | number[] | string | undefined;

      /**
      * (event : void) => void :  Emitted when the datetime loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the datetime selection was cancelled.
      */
      "on:ionCancel"?: (event: void) => void;

      /**
      * (event : DatetimeChangeEventDetail) => void :  Emitted when the value (selected date) has changed.
      */
      "on:ionChange"?: (event: DatetimeChangeEventDetail) => void;

      /**
      * (event : void) => void :  Emitted when the datetime has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-datetime-button': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The ID of the `ion-datetime` instance associated with the datetime button.
      */
      "datetime"?: string | undefined;

      /**
      * If `true`, the user cannot interact with the button.
      */
      "disabled"?: boolean;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-fab': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, both the `ion-fab-button` and all `ion-fab-list` inside `ion-fab` will become active. That means `ion-fab-button` will become a `close` icon and `ion-fab-list` will become visible.
      */
      "activated"?: boolean;

      /**
      * If `true`, the fab will display on the edge of the header if `vertical` is `"top"`, and on the edge of the footer if it is `"bottom"`. Should be used with a `fixed` slot.
      */
      "edge"?: boolean;

      /**
      * Where to align the fab horizontally in the viewport.
      */
      "horizontal"?: "center" | "end" | "start" | undefined;

      /**
      * Where to align the fab vertically in the viewport.
      */
      "vertical"?: "bottom" | "center" | "top" | undefined;
    }

    'ion-fab-button': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the fab button will be show a close icon.
      */
      "activated"?: boolean;

      /**
      * The icon name to use for the close icon. This will appear when the fab button is pressed. Only applies if it is the main button inside of a fab containing a fab list.
      */
      "closeIcon"?: string;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the fab button.
      */
      "disabled"?: boolean;

      /**
      * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
      */
      "download"?: string | undefined;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * When using a router, it specifies the transition animation when navigating to another page using `href`.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * When using a router, it specifies the transition direction when navigating to another page using `href`.
      */
      "routerDirection"?: "back" | "forward" | "root";

      /**
      * If `true`, the fab button will show when in a fab-list.
      */
      "show"?: boolean;

      /**
      * The size of the button. Set this to `small` in order to have a mini fab button.
      */
      "size"?: "small" | undefined;

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;

      /**
      * If `true`, the fab button will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;

      /**
      * The type of the button.
      */
      "type"?: "button" | "reset" | "submit";

      /**
      * (event : void) => void :  Emitted when the button loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the button has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-fab-list': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the fab list will show all fab buttons in the list.
      */
      "activated"?: boolean;

      /**
      * The side the fab list will show on relative to the main fab button.
      */
      "side"?: "bottom" | "end" | "start" | "top";
    }

    'ion-footer': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Describes the scroll effect that will be applied to the footer. Only applies in iOS mode.
      */
      "collapse"?: "fade" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the footer will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).  Note: In order to scroll content behind the footer, the `fullscreen` attribute needs to be set on the content.
      */
      "translucent"?: boolean;
    }

    'ion-grid': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the grid will have a fixed width based on the screen size.
      */
      "fixed"?: boolean;
    }

    'ion-header': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Describes the scroll effect that will be applied to the header. Only applies in iOS mode.  Typically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)
      */
      "collapse"?: "condense" | "fade" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the header will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).  Note: In order to scroll content behind the header, the `fullscreen` attribute needs to be set on the content.
      */
      "translucent"?: boolean;
    }

    'ion-img': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * This attribute defines the alternative text describing the image. Users will see this text displayed if the image URL is wrong, the image is not in one of the supported formats, or if the image is not yet downloaded.
      */
      "alt"?: string | undefined;

      /**
      * The image URL. This attribute is mandatory for the `<img>` element.
      */
      "src"?: string | undefined;

      /**
      * (event : void) => void :  Emitted when the img fails to load
      */
      "on:ionError"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the image has finished loading
      */
      "on:ionImgDidLoad"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the img src has been set
      */
      "on:ionImgWillLoad"?: (event: void) => void;
    }

    'ion-infinite-scroll': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the infinite scroll will be hidden and scroll event listeners will be removed.  Set this to true to disable the infinite scroll from actively trying to receive new data while scrolling. This is useful when it is known that there is no more data that can be added, and the infinite scroll is no longer needed.
      */
      "disabled"?: boolean;

      /**
      * The position of the infinite scroll element. The value can be either `top` or `bottom`.
      */
      "position"?: "bottom" | "top";

      /**
      * The threshold distance from the bottom of the content to call the `infinite` output event when scrolled. The threshold value can be either a percent, or in pixels. For example, use the value of `10%` for the `infinite` output event to get called when the user has scrolled 10% from the bottom of the page. Use the value `100px` when the scroll is within 100 pixels from the bottom of the page.
      */
      "threshold"?: string;

      /**
      * (event : void) => void :  Emitted when the scroll reaches the threshold distance. From within your infinite handler, you must call the infinite scroll's `complete()` method when your async operation has completed.
      */
      "on:ionInfinite"?: (event: void) => void;
    }

    'ion-infinite-scroll-content': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * An animated SVG spinner that shows while loading.
      */
      "loadingSpinner"?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-sharp" | "lines-sharp-small" | "lines-small" | null | undefined;

      /**
      * Optional text to display while loading. `loadingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
      */
      "loadingText"?: IonicSafeString | string | undefined;
    }

    'ion-input': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * This attribute is ignored.
      */
      "accept"?: string | undefined;

      /**
      * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
      */
      "autocapitalize"?: string;

      /**
      * Indicates whether the value of the control can be automatically completed by the browser.
      */
      "autocomplete"?: "name" | "email" | "tel" | "url" | "on" | "off" | "honorific-prefix" | "given-name" | "additional-name" | "family-name" | "honorific-suffix" | "nickname" | "username" | "new-password" | "current-password" | "one-time-code" | "organization-title" | "organization" | "street-address" | "address-line1" | "address-line2" | "address-line3" | "address-level4" | "address-level3" | "address-level2" | "address-level1" | "country" | "country-name" | "postal-code" | "cc-name" | "cc-given-name" | "cc-additional-name" | "cc-family-name" | "cc-number" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-csc" | "cc-type" | "transaction-currency" | "transaction-amount" | "language" | "bday" | "bday-day" | "bday-month" | "bday-year" | "sex" | "tel-country-code" | "tel-national" | "tel-area-code" | "tel-local" | "tel-extension" | "impp" | "photo";

      /**
      * Whether auto correction should be enabled when the user is entering/editing the text value.
      */
      "autocorrect"?: "off" | "on";

      /**
      * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
      */
      "autofocus"?: boolean;

      /**
      * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
      */
      "clearInput"?: boolean;

      /**
      * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
      */
      "clearOnEdit"?: boolean | undefined;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
      */
      "debounce"?: number;

      /**
      * If `true`, the user cannot interact with the input.
      */
      "disabled"?: boolean;

      /**
      * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
      */
      "enterkeyhint"?: "done" | "enter" | "go" | "next" | "previous" | "search" | "send" | undefined;

      /**
      * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
      */
      "inputmode"?: "decimal" | "email" | "none" | "numeric" | "search" | "tel" | "text" | "url" | undefined;

      /**
      * The maximum value, which must not be less than its minimum (min attribute) value.
      */
      "max"?: number | string | undefined;

      /**
      * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
      */
      "maxlength"?: number | undefined;

      /**
      * The minimum value, which must not be greater than its maximum (max attribute) value.
      */
      "min"?: number | string | undefined;

      /**
      * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
      */
      "minlength"?: number | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"`, otherwise it is ignored.
      */
      "multiple"?: boolean | undefined;

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, `"date"`, or `"password"`, otherwise it is ignored. When the type attribute is `"date"`, `pattern` will only be used in browsers that do not support the `"date"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.
      */
      "pattern"?: string | undefined;

      /**
      * Instructional text that shows before the input has a value. This property applies only when the `type` property is set to `"email"`, `"number"`, `"password"`, `"search"`, `"tel"`, `"text"`, or `"url"`, otherwise it is ignored.
      */
      "placeholder"?: string | undefined;

      /**
      * If `true`, the user cannot modify the value.
      */
      "readonly"?: boolean;

      /**
      * If `true`, the user must fill in a value before submitting a form.
      */
      "required"?: boolean;

      /**
      * The initial size of the control. This value is in pixels unless the value of the type attribute is `"text"` or `"password"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
      */
      "size"?: number | undefined;

      /**
      * If `true`, the element will have its spelling and grammar checked.
      */
      "spellcheck"?: boolean;

      /**
      * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
      */
      "step"?: string | undefined;

      /**
      * The type of control to display. The default type is text.
      */
      "type"?: "date" | "datetime-local" | "email" | "month" | "number" | "password" | "search" | "tel" | "text" | "time" | "url" | "week";

      /**
      * The value of the input.
      */
      "value"?: null | number | string | undefined;

      /**
      * (event : FocusEvent) => void :  Emitted when the input loses focus.
      */
      "on:ionBlur"?: (event: FocusEvent) => void;

      /**
      * (event : InputChangeEventDetail) => void :  Emitted when the value has changed.
      */
      "on:ionChange"?: (event: InputChangeEventDetail) => void;

      /**
      * (event : FocusEvent) => void :  Emitted when the input has focus.
      */
      "on:ionFocus"?: (event: FocusEvent) => void;

      /**
      * (event : InputEvent) => void :  Emitted when a keyboard input occurred.
      */
      "on:ionInput"?: (event: InputEvent) => void;
    }

    'ion-item': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, a button tag will be rendered and the item will be tappable.
      */
      "button"?: boolean;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, a character counter will display the ratio of characters used and the total character limit. Only applies when the `maxlength` property is set on the inner `ion-input` or `ion-textarea`.
      */
      "counter"?: boolean;

      /**
      * A callback used to format the counter text. By default the counter text is set to "itemLength / maxLength".
      */
      "counterFormatter"?: ((inputLength: number, maxLength: number) => string) | undefined;

      /**
      * If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode` is `ios` and an `href` or `button` property is present.
      */
      "detail"?: boolean | undefined;

      /**
      * The icon to use when `detail` is set to `true`.
      */
      "detailIcon"?: string;

      /**
      * If `true`, the user cannot interact with the item.
      */
      "disabled"?: boolean;

      /**
      * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
      */
      "download"?: string | undefined;

      /**
      * The fill for the item. If `'solid'` the item will have a background. If `'outline'` the item will be transparent with a border. Only available in `md` mode.
      */
      "fill"?: "outline" | "solid" | undefined;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * How the bottom border should be displayed on the item.
      */
      "lines"?: "full" | "inset" | "none" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * When using a router, it specifies the transition animation when navigating to another page using `href`.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * When using a router, it specifies the transition direction when navigating to another page using `href`.
      */
      "routerDirection"?: "back" | "forward" | "root";

      /**
      * The shape of the item. If "round" it will have increased border radius.
      */
      "shape"?: "round" | undefined;

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;

      /**
      * The type of the button. Only used when an `onclick` or `button` property is present.
      */
      "type"?: "button" | "reset" | "submit";
    }

    'ion-item-divider': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * When it's set to `true`, the item-divider will stay visible when it reaches the top of the viewport until the next `ion-item-divider` replaces it.  This feature relies in `position:sticky`: https://caniuse.com/#feat=css-sticky
      */
      "sticky"?: boolean;
    }

    'ion-item-group': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;
    }

    'ion-item-option': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the item option.
      */
      "disabled"?: boolean;

      /**
      * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
      */
      "download"?: string | undefined;

      /**
      * If `true`, the option will expand to take up the available width and cover any other options.
      */
      "expandable"?: boolean;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;

      /**
      * The type of the button.
      */
      "type"?: "button" | "reset" | "submit";
    }

    'ion-item-options': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The side the option button should be on. Possible values: `"start"` and `"end"`. If you have multiple `ion-item-options`, a side must be provided for each.
      */
      "side"?: "end" | "start";

      /**
      * (event : any) => void :  Emitted when the item has been fully swiped.
      */
      "on:ionSwipe"?: (event: any) => void;
    }

    'ion-item-sliding': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the user cannot interact with the sliding item.
      */
      "disabled"?: boolean;

      /**
      * (event : any) => void :  Emitted when the sliding position changes.
      */
      "on:ionDrag"?: (event: any) => void;
    }

    'ion-label': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The position determines where and how the label behaves inside an item.
      */
      "position"?: "fixed" | "floating" | "stacked" | undefined;
    }

    'ion-list': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the list will have margin around it and rounded corners.
      */
      "inset"?: boolean;

      /**
      * How the bottom border should be displayed on all items.
      */
      "lines"?: "full" | "inset" | "none" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-list-header': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * How the bottom border should be displayed on the list header.
      */
      "lines"?: "full" | "inset" | "none" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-loading': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the loading indicator will animate.
      */
      "animated"?: boolean;

      /**
      * If `true`, the loading indicator will be dismissed when the backdrop is clicked.
      */
      "backdropDismiss"?: boolean;

      /**
      * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
      */
      "cssClass"?: string | string[] | undefined;

      /**
      * Number of milliseconds to wait before dismissing the loading indicator.
      */
      "duration"?: number;

      /**
      * Animation to use when the loading indicator is presented.
      */
      "enterAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * Additional attributes to pass to the loader.
      */
      "htmlAttributes"?: undefined | { [key: string]: any; };

      /**
      * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
      */
      "keyboardClose"?: boolean;

      /**
      * Animation to use when the loading indicator is dismissed.
      */
      "leaveAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * Optional text content to display in the loading indicator.
      */
      "message"?: IonicSafeString | string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, a backdrop will be displayed behind the loading indicator.
      */
      "showBackdrop"?: boolean;

      /**
      * The name of the spinner to display.
      */
      "spinner"?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-sharp" | "lines-sharp-small" | "lines-small" | null | undefined;

      /**
      * If `true`, the loading indicator will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the loading has dismissed.
      */
      "on:ionLoadingDidDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the loading has presented.
      */
      "on:ionLoadingDidPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the loading has dismissed.
      */
      "on:ionLoadingWillDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the loading has presented.
      */
      "on:ionLoadingWillPresent"?: (event: void) => void;
    }

    'ion-menu': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The `id` of the main content. When using a router this is typically `ion-router-outlet`. When not using a router, this is typically your main view's `ion-content`. This is not the id of the `ion-content` inside of your `ion-menu`.
      */
      "contentId"?: string | undefined;

      /**
      * If `true`, the menu is disabled.
      */
      "disabled"?: boolean;

      /**
      * The edge threshold for dragging the menu open. If a drag/swipe happens over this value, the menu is not triggered.
      */
      "maxEdgeStart"?: number;

      /**
      * An id for the menu.
      */
      "menuId"?: string | undefined;

      /**
      * Which side of the view the menu should be placed.
      */
      "side"?: "end" | "start";

      /**
      * If `true`, swiping the menu is enabled.
      */
      "swipeGesture"?: boolean;

      /**
      * The display type of the menu. Available options: `"overlay"`, `"reveal"`, `"push"`.
      */
      "type"?: string | undefined;

      /**
      * (event : void) => void :  Emitted when the menu is closed.
      */
      "on:ionDidClose"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the menu is open.
      */
      "on:ionDidOpen"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the menu is about to be closed.
      */
      "on:ionWillClose"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the menu is about to be opened.
      */
      "on:ionWillOpen"?: (event: void) => void;
    }

    'ion-menu-button': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Automatically hides the menu button when the corresponding menu is not active
      */
      "autoHide"?: boolean;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the menu button.
      */
      "disabled"?: boolean;

      /**
      * Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle
      */
      "menu"?: string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The type of the button.
      */
      "type"?: "button" | "reset" | "submit";
    }

    'ion-menu-toggle': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Automatically hides the content when the corresponding menu is not active.  By default, it's `true`. Change it to `false` in order to keep `ion-menu-toggle` always visible regardless the state of the menu.
      */
      "autoHide"?: boolean;

      /**
      * Optional property that maps to a Menu's `menuId` prop. Can also be `start` or `end` for the menu side. This is used to find the correct menu to toggle.  If this property is not used, `ion-menu-toggle` will toggle the first menu that is active.
      */
      "menu"?: string | undefined;
    }

    'ion-modal': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the modal will animate.
      */
      "animated"?: boolean;

      /**
      * A decimal value between 0 and 1 that indicates the point after which the backdrop will begin to fade in when using a sheet modal. Prior to this point, the backdrop will be hidden and the content underneath the sheet can be interacted with. This value is exclusive meaning the backdrop will become active after the value specified.
      */
      "backdropBreakpoint"?: number;

      /**
      * If `true`, the modal will be dismissed when the backdrop is clicked.
      */
      "backdropDismiss"?: boolean;

      /**
      * The breakpoints to use when creating a sheet modal. Each value in the array must be a decimal between 0 and 1 where 0 indicates the modal is fully closed and 1 indicates the modal is fully open. Values are relative to the height of the modal, not the height of the screen. One of the values in this array must be the value of the `initialBreakpoint` property. For example: [0, .25, .5, 1]
      */
      "breakpoints"?: number[] | undefined;

      /**
      * Determines whether or not a modal can dismiss when calling the `dismiss` method.  If the value is `true` or the value's function returns `true`, the modal will close when trying to dismiss. If the value is `false` or the value's function returns `false`, the modal will not close when trying to dismiss.
      */
      "canDismiss"?: (() => Promise<boolean>) | boolean | undefined;

      /**
      * Animation to use when the modal is presented.
      */
      "enterAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The horizontal line that displays at the top of a sheet modal. It is `true` by default when setting the `breakpoints` and `initialBreakpoint` properties.
      */
      "handle"?: boolean | undefined;

      /**
      * The interaction behavior for the sheet modal when the handle is pressed.  Defaults to `"none"`, which  means the modal will not change size or position when the handle is pressed. Set to `"cycle"` to let the modal cycle between available breakpoints when pressed.  Handle behavior is unavailable when the `handle` property is set to `false` or when the `breakpoints` property is not set (using a fullscreen or card modal).
      */
      "handleBehavior"?: "cycle" | "none" | undefined;

      /**
      * Additional attributes to pass to the modal.
      */
      "htmlAttributes"?: undefined | { [key: string]: any; };

      /**
      * A decimal value between 0 and 1 that indicates the initial point the modal will open at when creating a sheet modal. This value must also be listed in the `breakpoints` array.
      */
      "initialBreakpoint"?: number | undefined;

      /**
      * If `true`, the modal will open. If `false`, the modal will close. Use this if you need finer grained control over presentation, otherwise just use the modalController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the modal dismisses. You will need to do that in your code.
      */
      "isOpen"?: boolean;

      /**
      * If `true`, the component passed into `ion-modal` will automatically be mounted when the modal is created. The component will remain mounted even when the modal is dismissed. However, the component will be destroyed when the modal is destroyed. This property is not reactive and should only be used when initially creating a modal.  Note: This feature only applies to inline modals in JavaScript frameworks such as Angular, React, and Vue.
      */
      "keepContentsMounted"?: boolean;

      /**
      * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
      */
      "keyboardClose"?: boolean;

      /**
      * Animation to use when the modal is dismissed.
      */
      "leaveAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The element that presented the modal. This is used for card presentation effects and for stacking multiple modals on top of each other. Only applies in iOS mode.
      */
      "presentingElement"?: HTMLElement | undefined;

      /**
      * If `true`, a backdrop will be displayed behind the modal. This property controls whether or not the backdrop darkens the screen when the modal is presented. It does not control whether or not the backdrop is active or present in the DOM.
      */
      "showBackdrop"?: boolean;

      /**
      * If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.
      */
      "swipeToClose"?: boolean;

      /**
      * An ID corresponding to the trigger element that causes the modal to open when clicked.
      */
      "trigger"?: string | undefined;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the modal has dismissed. Shorthand for ionModalDidDismiss.
      */
      "on:didDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the modal has presented. Shorthand for ionModalWillDismiss.
      */
      "on:didPresent"?: (event: void) => void;

      /**
      * (event : ModalBreakpointChangeEventDetail) => void :  Emitted after the modal breakpoint has changed.
      */
      "on:ionBreakpointDidChange"?: (event: ModalBreakpointChangeEventDetail) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the modal has dismissed.
      */
      "on:ionModalDidDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the modal has presented.
      */
      "on:ionModalDidPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the modal has dismissed.
      */
      "on:ionModalWillDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the modal has presented.
      */
      "on:ionModalWillPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the modal has dismissed. Shorthand for ionModalWillDismiss.
      */
      "on:willDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the modal has presented. Shorthand for ionModalWillPresent.
      */
      "on:willPresent"?: (event: void) => void;
    }

    'ion-nav': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the nav should animate the transition of components.
      */
      "animated"?: boolean;

      /**
      * By default `ion-nav` animates transition between pages based in the mode (ios or material design). However, this property allows to create custom transition using `AnimationBuilder` functions.
      */
      "animation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * Root NavComponent to load
      */
      "root"?: Function | HTMLElement | ViewController | null | string | undefined;

      /**
      * Any parameters for the root component
      */
      "rootParams"?: undefined | { [key: string]: any; };

      /**
      * If the nav component should allow for swipe-to-go-back.
      */
      "swipeGesture"?: boolean | undefined;

      /**
      * (event : void) => void :  Event fired when the nav has changed components
      */
      "on:ionNavDidChange"?: (event: void) => void;

      /**
      * (event : void) => void :  Event fired when the nav will change components
      */
      "on:ionNavWillChange"?: (event: void) => void;
    }

    'ion-nav-link': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Component to navigate to. Only used if the `routerDirection` is `"forward"` or `"root"`.
      */
      "component"?: Function | HTMLElement | ViewController | null | string | undefined;

      /**
      * Data you want to pass to the component as props. Only used if the `"routerDirection"` is `"forward"` or `"root"`.
      */
      "componentProps"?: undefined | { [key: string]: any; };

      /**
      * The transition animation when navigating to another page.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The transition direction when navigating to another page.
      */
      "routerDirection"?: "back" | "forward" | "root";
    }

    'ion-note': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-picker': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the picker will animate.
      */
      "animated"?: boolean;

      /**
      * If `true`, the picker will be dismissed when the backdrop is clicked.
      */
      "backdropDismiss"?: boolean;

      /**
      * Array of buttons to be displayed at the top of the picker.
      */
      "buttons"?: PickerButton[];

      /**
      * Array of columns to be displayed in the picker.
      */
      "columns"?: PickerColumn[];

      /**
      * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
      */
      "cssClass"?: string | string[] | undefined;

      /**
      * Number of milliseconds to wait before dismissing the picker.
      */
      "duration"?: number;

      /**
      * Animation to use when the picker is presented.
      */
      "enterAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * Additional attributes to pass to the picker.
      */
      "htmlAttributes"?: undefined | { [key: string]: any; };

      /**
      * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
      */
      "keyboardClose"?: boolean;

      /**
      * Animation to use when the picker is dismissed.
      */
      "leaveAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, a backdrop will be displayed behind the picker.
      */
      "showBackdrop"?: boolean;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the picker has dismissed.
      */
      "on:ionPickerDidDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the picker has presented.
      */
      "on:ionPickerDidPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the picker has dismissed.
      */
      "on:ionPickerWillDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the picker has presented.
      */
      "on:ionPickerWillPresent"?: (event: void) => void;
    }

    'ion-popover': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Describes how to align the popover content with the `reference` point. Defaults to `'center'` for `ios` mode, and `'start'` for `md` mode.
      */
      "alignment"?: "center" | "end" | "start" | undefined;

      /**
      * If `true`, the popover will animate.
      */
      "animated"?: boolean;

      /**
      * If `true`, the popover will display an arrow that points at the `reference` when running in `ios` mode. Does not apply in `md` mode.
      */
      "arrow"?: boolean;

      /**
      * If `true`, the popover will be dismissed when the backdrop is clicked.
      */
      "backdropDismiss"?: boolean;

      /**
      * The component to display inside of the popover. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just slot your component inside of `ion-popover`.
      */
      "component"?: Function | HTMLElement | null | string | undefined;

      /**
      * The data to pass to the popover component. You only need to use this if you are not using a JavaScript framework. Otherwise, you can just set the props directly on your component.
      */
      "componentProps"?: undefined | { [key: string]: any; };

      /**
      * If `true`, the popover will be automatically dismissed when the content has been clicked.
      */
      "dismissOnSelect"?: boolean;

      /**
      * Animation to use when the popover is presented.
      */
      "enterAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The event to pass to the popover animation.
      */
      "event"?: any;

      /**
      * Additional attributes to pass to the popover.
      */
      "htmlAttributes"?: undefined | { [key: string]: any; };

      /**
      * If `true`, the popover will open. If `false`, the popover will close. Use this if you need finer grained control over presentation, otherwise just use the popoverController or the `trigger` property. Note: `isOpen` will not automatically be set back to `false` when the popover dismisses. You will need to do that in your code.
      */
      "isOpen"?: boolean;

      /**
      * If `true`, the component passed into `ion-popover` will automatically be mounted when the popover is created. The component will remain mounted even when the popover is dismissed. However, the component will be destroyed when the popover is destroyed. This property is not reactive and should only be used when initially creating a popover.  Note: This feature only applies to inline popovers in JavaScript frameworks such as Angular, React, and Vue.
      */
      "keepContentsMounted"?: boolean;

      /**
      * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
      */
      "keyboardClose"?: boolean;

      /**
      * Animation to use when the popover is dismissed.
      */
      "leaveAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Describes what to position the popover relative to. If `'trigger'`, the popover will be positioned relative to the trigger button. If passing in an event, this is determined via event.target. If `'event'`, the popover will be positioned relative to the x/y coordinates of the trigger action. If passing in an event, this is determined via event.clientX and event.clientY.
      */
      "reference"?: "event" | "trigger";

      /**
      * If `true`, a backdrop will be displayed behind the popover. This property controls whether or not the backdrop darkens the screen when the popover is presented. It does not control whether or not the backdrop is active or present in the DOM.
      */
      "showBackdrop"?: boolean;

      /**
      * Describes which side of the `reference` point to position the popover on. The `'start'` and `'end'` values are RTL-aware, and the `'left'` and `'right'` values are not.
      */
      "side"?: "bottom" | "end" | "left" | "right" | "start" | "top";

      /**
      * Describes how to calculate the popover width. If `'cover'`, the popover width will match the width of the trigger. If `'auto'`, the popover width will be determined by the content in the popover.
      */
      "size"?: "auto" | "cover";

      /**
      * If `true`, the popover will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;

      /**
      * An ID corresponding to the trigger element that causes the popover to open. Use the `trigger-action` property to customize the interaction that results in the popover opening.
      */
      "trigger"?: string | undefined;

      /**
      * Describes what kind of interaction with the trigger that should cause the popover to open. Does not apply when the `trigger` property is `undefined`. If `'click'`, the popover will be presented when the trigger is left clicked. If `'hover'`, the popover will be presented when a pointer hovers over the trigger. If `'context-menu'`, the popover will be presented when the trigger is right clicked on desktop and long pressed on mobile. This will also prevent your device's normal context menu from appearing.
      */
      "triggerAction"?: "click" | "context-menu" | "hover";

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the popover has dismissed. Shorthand for ionPopoverDidDismiss.
      */
      "on:didDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the popover has presented. Shorthand for ionPopoverWillDismiss.
      */
      "on:didPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the popover has dismissed.
      */
      "on:ionPopoverDidDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the popover has presented.
      */
      "on:ionPopoverDidPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the popover has dismissed.
      */
      "on:ionPopoverWillDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the popover has presented.
      */
      "on:ionPopoverWillPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the popover has dismissed. Shorthand for ionPopoverWillDismiss.
      */
      "on:willDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the popover has presented. Shorthand for ionPopoverWillPresent.
      */
      "on:willPresent"?: (event: void) => void;
    }

    'ion-progress-bar': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If the buffer and value are smaller than 1, the buffer circles will show. The buffer should be between [0, 1].
      */
      "buffer"?: number;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If true, reverse the progress bar direction.
      */
      "reversed"?: boolean;

      /**
      * The state of the progress bar, based on if the time the process takes is known or not. Default options are: `"determinate"` (no animation), `"indeterminate"` (animate from left to right).
      */
      "type"?: "determinate" | "indeterminate";

      /**
      * The value determines how much of the active bar should display when the `type` is `"determinate"`. The value should be between [0, 1].
      */
      "value"?: number;
    }

    'ion-radio': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the radio.
      */
      "disabled"?: boolean;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * the value of the radio.
      */
      "value"?: any;

      /**
      * (event : void) => void :  Emitted when the radio button loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the radio button has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-radio-group': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the radios can be deselected.
      */
      "allowEmptySelection"?: boolean;

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * the value of the radio group.
      */
      "value"?: any;

      /**
      * (event : RadioGroupChangeEventDetail<any>) => void :  Emitted when the value has changed.
      */
      "on:ionChange"?: (event: RadioGroupChangeEventDetail<any>) => void;
    }

    'ion-range': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The start position of the range active bar. This feature is only available with a single knob (dualKnobs="false"). Valid values are greater than or equal to the min value and less than or equal to the max value.
      */
      "activeBarStart"?: number | undefined;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * How long, in milliseconds, to wait to trigger the `ionChange` event after each change in the range value. This also impacts form bindings such as `ngModel` or `v-model`.
      */
      "debounce"?: number;

      /**
      * If `true`, the user cannot interact with the range.
      */
      "disabled"?: boolean;

      /**
      * Show two knobs.
      */
      "dualKnobs"?: boolean;

      /**
      * Maximum integer value of the range.
      */
      "max"?: number;

      /**
      * Minimum integer value of the range.
      */
      "min"?: number;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * If `true`, a pin with integer value is shown when the knob is pressed.
      */
      "pin"?: boolean;

      /**
      * A callback used to format the pin text. By default the pin text is set to `Math.round(value)`.
      */
      "pinFormatter"?: (value: number) => string | number;

      /**
      * If `true`, the knob snaps to tick marks evenly spaced based on the step property value.
      */
      "snaps"?: boolean;

      /**
      * Specifies the value granularity.
      */
      "step"?: number;

      /**
      * If `true`, tick marks are displayed based on the step value. Only applies when `snaps` is `true`.
      */
      "ticks"?: boolean;

      /**
      * the value of the range.
      */
      "value"?: number | { lower: number; upper: number; };

      /**
      * (event : void) => void :  Emitted when the range loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : RangeChangeEventDetail) => void :  Emitted when the value property has changed.
      */
      "on:ionChange"?: (event: RangeChangeEventDetail) => void;

      /**
      * (event : void) => void :  Emitted when the range has focus.
      */
      "on:ionFocus"?: (event: void) => void;

      /**
      * (event : RangeKnobMoveEndEventDetail) => void :  Emitted when the user finishes moving the range knob, whether through mouse drag, touch gesture, or keyboard interaction.
      */
      "on:ionKnobMoveEnd"?: (event: RangeKnobMoveEndEventDetail) => void;

      /**
      * (event : RangeKnobMoveStartEventDetail) => void :  Emitted when the user starts moving the range knob, whether through mouse drag, touch gesture, or keyboard interaction.
      */
      "on:ionKnobMoveStart"?: (event: RangeKnobMoveStartEventDetail) => void;
    }

    'ion-refresher': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Time it takes to close the refresher. Does not apply when the refresher content uses a spinner, enabling the native refresher.
      */
      "closeDuration"?: string;

      /**
      * If `true`, the refresher will be hidden.
      */
      "disabled"?: boolean;

      /**
      * How much to multiply the pull speed by. To slow the pull animation down, pass a number less than `1`. To speed up the pull, pass a number greater than `1`. The default value is `1` which is equal to the speed of the cursor. If a negative value is passed in, the factor will be `1` instead.  For example: If the value passed is `1.2` and the content is dragged by `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels (an increase of 20 percent). If the value passed is `0.8`, the dragged amount will be `8` pixels, less than the amount the cursor has moved.  Does not apply when the refresher content uses a spinner, enabling the native refresher.
      */
      "pullFactor"?: number;

      /**
      * The maximum distance of the pull until the refresher will automatically go into the `refreshing` state. Defaults to the result of `pullMin + 60`. Does not apply when  the refresher content uses a spinner, enabling the native refresher.
      */
      "pullMax"?: number;

      /**
      * The minimum distance the user must pull down until the refresher will go into the `refreshing` state. Does not apply when the refresher content uses a spinner, enabling the native refresher.
      */
      "pullMin"?: number;

      /**
      * Time it takes the refresher to snap back to the `refreshing` state. Does not apply when the refresher content uses a spinner, enabling the native refresher.
      */
      "snapbackDuration"?: string;

      /**
      * (event : void) => void :  Emitted while the user is pulling down the content and exposing the refresher.
      */
      "on:ionPull"?: (event: void) => void;

      /**
      * (event : RefresherEventDetail) => void :  Emitted when the user lets go of the content and has pulled down further than the `pullMin` or pulls the content down and exceeds the pullMax. Updates the refresher state to `refreshing`. The `complete()` method should be called when the async operation has completed.
      */
      "on:ionRefresh"?: (event: RefresherEventDetail) => void;

      /**
      * (event : void) => void :  Emitted when the user begins to start pulling down.
      */
      "on:ionStart"?: (event: void) => void;
    }

    'ion-refresher-content': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * A static icon or a spinner to display when you begin to pull down. A spinner name can be provided to gradually show tick marks when pulling down on iOS devices.
      */
      "pullingIcon"?: null | string | undefined;

      /**
      * The text you want to display when you begin to pull down. `pullingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
      */
      "pullingText"?: IonicSafeString | string | undefined;

      /**
      * An animated SVG spinner that shows when refreshing begins
      */
      "refreshingSpinner"?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-sharp" | "lines-sharp-small" | "lines-small" | null | undefined;

      /**
      * The text you want to display when performing a refresh. `refreshingText` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
      */
      "refreshingText"?: IonicSafeString | string | undefined;
    }

    'ion-reorder': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;
    }

    'ion-reorder-group': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the reorder will be hidden.
      */
      "disabled"?: boolean;

      /**
      * (event : ItemReorderEventDetail) => void :  Event that needs to be listened to in order to complete the reorder action. Once the event has been emitted, the `complete()` method then needs to be called in order to finalize the reorder action.
      */
      "on:ionItemReorder"?: (event: ItemReorderEventDetail) => void;
    }

    'ion-ripple-effect': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * Sets the type of ripple-effect:  - `bounded`: the ripple effect expands from the user's click position - `unbounded`: the ripple effect expands from the center of the button and overflows the container.  NOTE: Surfaces for bounded ripples should have the overflow property set to hidden, while surfaces for unbounded ripples should have it set to visible.
      */
      "type"?: "bounded" | "unbounded";
    }

    'ion-route': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * A navigation hook that is fired when the route tries to enter. Returning `true` allows the navigation to proceed, while returning `false` causes it to be cancelled. Returning a `NavigationHookOptions` object causes the router to redirect to the path specified.
      */
      "beforeEnter"?: (() => NavigationHookResult | Promise<NavigationHookResult>) | undefined;

      /**
      * A navigation hook that is fired when the route tries to leave. Returning `true` allows the navigation to proceed, while returning `false` causes it to be cancelled. Returning a `NavigationHookOptions` object causes the router to redirect to the path specified.
      */
      "beforeLeave"?: (() => NavigationHookResult | Promise<NavigationHookResult>) | undefined;

      /**
      * Name of the component to load/select in the navigation outlet (`ion-tabs`, `ion-nav`) when the route matches.  The value of this property is not always the tagname of the component to load, in `ion-tabs` it actually refers to the name of the `ion-tab` to select.
      */
      "component"?: string;

      /**
      * A key value `{ 'red': true, 'blue': 'white'}` containing props that should be passed to the defined component when rendered.
      */
      "componentProps"?: undefined | { [key: string]: any; };

      /**
      * Relative path that needs to match in order for this route to apply.  Accepts paths similar to expressjs so that you can define parameters in the url /foo/:bar where bar would be available in incoming props.
      */
      "url"?: string;

      /**
      * (event : any) => void :  Used internally by `ion-router` to know when this route did change.
      */
      "on:ionRouteDataChanged"?: (event: any) => void;
    }

    'ion-route-redirect': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * A redirect route, redirects "from" a URL "to" another URL. This property is that "from" URL. It needs to be an exact match of the navigated URL in order to apply.  The path specified in this value is always an absolute path, even if the initial `/` slash is not specified.
      */
      "from"?: string;

      /**
      * A redirect route, redirects "from" a URL "to" another URL. This property is that "to" URL. When the defined `ion-route-redirect` rule matches, the router will redirect to the path specified in this property.  The value of this property is always an absolute path inside the scope of routes defined in `ion-router` it can't be used with another router or to perform a redirection to a different domain.  Note that this is a virtual redirect, it will not cause a real browser refresh, again, it's a redirect inside the context of ion-router.  When this property is not specified or his value is `undefined` the whole redirect route is noop, even if the "from" value matches.
      */
      "to"?: null | string | undefined;

      /**
      * (event : any) => void :  Internal event that fires when any value of this rule is added/removed from the DOM, or any of his public properties changes.  `ion-router` captures this event in order to update his internal registry of router rules.
      */
      "on:ionRouteRedirectChanged"?: (event: any) => void;
    }

    'ion-router': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The root path to use when matching URLs. By default, this is set to "/", but you can specify an alternate prefix for all URL paths.
      */
      "root"?: string;

      /**
      * The router can work in two "modes": - With hash: `/index.html#/path/to/page` - Without hash: `/path/to/page`  Using one or another might depend in the requirements of your app and/or where it's deployed.  Usually "hash-less" navigation works better for SEO and it's more user friendly too, but it might requires additional server-side configuration in order to properly work.  On the other side hash-navigation is much easier to deploy, it even works over the file protocol.  By default, this property is `true`, change to `false` to allow hash-less URLs.
      */
      "useHash"?: boolean;

      /**
      * (event : RouterEventDetail) => void :  Emitted when the route had changed
      */
      "on:ionRouteDidChange"?: (event: RouterEventDetail) => void;

      /**
      * (event : RouterEventDetail) => void :  Event emitted when the route is about to change
      */
      "on:ionRouteWillChange"?: (event: RouterEventDetail) => void;
    }

    'ion-router-link': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * When using a router, it specifies the transition animation when navigating to another page using `href`.
      */
      "routerAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * When using a router, it specifies the transition direction when navigating to another page using `href`.
      */
      "routerDirection"?: "back" | "forward" | "root";

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;
    }

    'ion-router-outlet': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the router-outlet should animate the transition of components.
      */
      "animated"?: boolean;

      /**
      * This property allows to create custom transition using AnimationBuilder functions.
      */
      "animation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-row': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;
    }

    'ion-searchbar': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, enable searchbar animation.
      */
      "animated"?: boolean;

      /**
      * Set the input's autocomplete property.
      */
      "autocomplete"?: "name" | "email" | "tel" | "url" | "on" | "off" | "honorific-prefix" | "given-name" | "additional-name" | "family-name" | "honorific-suffix" | "nickname" | "username" | "new-password" | "current-password" | "one-time-code" | "organization-title" | "organization" | "street-address" | "address-line1" | "address-line2" | "address-line3" | "address-level4" | "address-level3" | "address-level2" | "address-level1" | "country" | "country-name" | "postal-code" | "cc-name" | "cc-given-name" | "cc-additional-name" | "cc-family-name" | "cc-number" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-csc" | "cc-type" | "transaction-currency" | "transaction-amount" | "language" | "bday" | "bday-day" | "bday-month" | "bday-year" | "sex" | "tel-country-code" | "tel-national" | "tel-area-code" | "tel-local" | "tel-extension" | "impp" | "photo";

      /**
      * Set the input's autocorrect property.
      */
      "autocorrect"?: "off" | "on";

      /**
      * Set the cancel button icon. Only applies to `md` mode. Defaults to `arrow-back-sharp`.
      */
      "cancelButtonIcon"?: string;

      /**
      * Set the the cancel button text. Only applies to `ios` mode.
      */
      "cancelButtonText"?: string;

      /**
      * Set the clear icon. Defaults to `close-circle` for `ios` and `close-sharp` for `md`.
      */
      "clearIcon"?: string | undefined;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
      */
      "debounce"?: number;

      /**
      * If `true`, the user cannot interact with the input.
      */
      "disabled"?: boolean;

      /**
      * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
      */
      "enterkeyhint"?: "done" | "enter" | "go" | "next" | "previous" | "search" | "send" | undefined;

      /**
      * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
      */
      "inputmode"?: "decimal" | "email" | "none" | "numeric" | "search" | "tel" | "text" | "url" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Set the input's placeholder. `placeholder` can accept either plaintext or HTML as a string. To display characters normally reserved for HTML, they must be escaped. For example `<Ionic>` would become `&lt;Ionic&gt;`  For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)
      */
      "placeholder"?: string;

      /**
      * The icon to use as the search icon. Defaults to `search-outline` in `ios` mode and `search-sharp` in `md` mode.
      */
      "searchIcon"?: string | undefined;

      /**
      * Sets the behavior for the cancel button. Defaults to `"never"`. Setting to `"focus"` shows the cancel button on focus. Setting to `"never"` hides the cancel button. Setting to `"always"` shows the cancel button regardless of focus state.
      */
      "showCancelButton"?: "always" | "focus" | "never";

      /**
      * Sets the behavior for the clear button. Defaults to `"focus"`. Setting to `"focus"` shows the clear button on focus if the input is not empty. Setting to `"never"` hides the clear button. Setting to `"always"` shows the clear button regardless of focus state, but only if the input is not empty.
      */
      "showClearButton"?: "always" | "focus" | "never";

      /**
      * If `true`, enable spellcheck on the input.
      */
      "spellcheck"?: boolean;

      /**
      * Set the type of the input.
      */
      "type"?: "email" | "number" | "password" | "search" | "tel" | "text" | "url";

      /**
      * the value of the searchbar.
      */
      "value"?: null | string | undefined;

      /**
      * (event : void) => void :  Emitted when the input loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the cancel button is clicked.
      */
      "on:ionCancel"?: (event: void) => void;

      /**
      * (event : SearchbarChangeEventDetail) => void :  Emitted when the value has changed.
      */
      "on:ionChange"?: (event: SearchbarChangeEventDetail) => void;

      /**
      * (event : void) => void :  Emitted when the clear input button is clicked.
      */
      "on:ionClear"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the input has focus.
      */
      "on:ionFocus"?: (event: void) => void;

      /**
      * (event : KeyboardEvent) => void :  Emitted when a keyboard input occurred.
      */
      "on:ionInput"?: (event: KeyboardEvent) => void;
    }

    'ion-segment': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the segment.
      */
      "disabled"?: boolean;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the segment buttons will overflow and the user can swipe to see them. In addition, this will disable the gesture to drag the indicator between the buttons in order to swipe to see hidden buttons.
      */
      "scrollable"?: boolean;

      /**
      * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element. If `false`, keyboard navigation will only focus the `ion-segment-button` element.
      */
      "selectOnFocus"?: boolean;

      /**
      * If `true`, users will be able to swipe between segment buttons to activate them.
      */
      "swipeGesture"?: boolean;

      /**
      * the value of the segment.
      */
      "value"?: null | string | undefined;

      /**
      * (event : SegmentChangeEventDetail) => void :  Emitted when the value property has changed and any dragging pointer has been released from `ion-segment`.
      */
      "on:ionChange"?: (event: SegmentChangeEventDetail) => void;
    }

    'ion-segment-button': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the user cannot interact with the segment button.
      */
      "disabled"?: boolean;

      /**
      * Set the layout of the text and icon in the segment.
      */
      "layout"?: "icon-bottom" | "icon-end" | "icon-hide" | "icon-start" | "icon-top" | "label-hide" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The type of the button.
      */
      "type"?: "button" | "reset" | "submit";

      /**
      * The value of the segment button.
      */
      "value"?: string;
    }

    'ion-select': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The text to display on the cancel button.
      */
      "cancelText"?: string;

      /**
      * A property name or function used to compare object values
      */
      "compareWith"?: ((currentValue: any, compareValue: any) => boolean) | null | string | undefined;

      /**
      * If `true`, the user cannot interact with the select.
      */
      "disabled"?: boolean;

      /**
      * The interface the select should use: `action-sheet`, `popover` or `alert`.
      */
      "interface"?: "action-sheet" | "alert" | "popover";

      /**
      * Any additional options that the `alert`, `action-sheet` or `popover` interface can take. See the [ion-alert docs](./alert), the [ion-action-sheet docs](./action-sheet) and the [ion-popover docs](./popover) for the create options for each interface.  Note: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.
      */
      "interfaceOptions"?: any;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * If `true`, the select can accept multiple values.
      */
      "multiple"?: boolean;

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * The text to display on the ok button.
      */
      "okText"?: string;

      /**
      * The text to display when the select is empty.
      */
      "placeholder"?: string | undefined;

      /**
      * The text to display instead of the selected option's value.
      */
      "selectedText"?: null | string | undefined;

      /**
      * the value of the select.
      */
      "value"?: any;

      /**
      * (event : void) => void :  Emitted when the select loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the selection is cancelled.
      */
      "on:ionCancel"?: (event: void) => void;

      /**
      * (event : SelectChangeEventDetail<any>) => void :  Emitted when the value has changed.
      */
      "on:ionChange"?: (event: SelectChangeEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted when the overlay is dismissed.
      */
      "on:ionDismiss"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the select has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-select-option': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the user cannot interact with the select option. This property does not apply when `interface="action-sheet"` as `ion-action-sheet` does not allow for disabled buttons.
      */
      "disabled"?: boolean;

      /**
      * The text value of the option.
      */
      "value"?: any;
    }

    'ion-skeleton-text': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the skeleton text will animate.
      */
      "animated"?: boolean;
    }

    'ion-slide': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;
    }

    'ion-slides': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Options to pass to the swiper instance. See https://swiperjs.com/swiper-api for valid options
      */
      "options"?: any;

      /**
      * If `true`, show the pagination.
      */
      "pager"?: boolean;

      /**
      * If `true`, show the scrollbar.
      */
      "scrollbar"?: boolean;

      /**
      * (event : void) => void :  Emitted after the active slide has changed.
      */
      "on:ionSlideDidChange"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the user double taps on the slide's container.
      */
      "on:ionSlideDoubleTap"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the slider is actively being moved.
      */
      "on:ionSlideDrag"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the next slide has ended.
      */
      "on:ionSlideNextEnd"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the next slide has started.
      */
      "on:ionSlideNextStart"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the previous slide has ended.
      */
      "on:ionSlidePrevEnd"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the previous slide has started.
      */
      "on:ionSlidePrevStart"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the slider is at the last slide.
      */
      "on:ionSlideReachEnd"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the slider is at its initial position.
      */
      "on:ionSlideReachStart"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted after Swiper initialization
      */
      "on:ionSlidesDidLoad"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the user taps/clicks on the slide's container.
      */
      "on:ionSlideTap"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the user releases the touch.
      */
      "on:ionSlideTouchEnd"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the user first touches the slider.
      */
      "on:ionSlideTouchStart"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the slide transition has ended.
      */
      "on:ionSlideTransitionEnd"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted when the slide transition has started.
      */
      "on:ionSlideTransitionStart"?: (event: void) => void;

      /**
      * (event : void) => void :  Emitted before the active slide has changed.
      */
      "on:ionSlideWillChange"?: (event: void) => void;
    }

    'ion-spinner': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * Duration of the spinner animation in milliseconds. The default varies based on the spinner.
      */
      "duration"?: number | undefined;

      /**
      * The name of the SVG spinner to use. If a name is not provided, the platform's default spinner will be used.
      */
      "name"?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-sharp" | "lines-sharp-small" | "lines-small" | undefined;

      /**
      * If `true`, the spinner's animation will be paused.
      */
      "paused"?: boolean;
    }

    'ion-split-pane': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The `id` of the main content. When using a router this is typically `ion-router-outlet`. When not using a router, this is typically your main view's `ion-content`. This is not the id of the `ion-content` inside of your `ion-menu`.
      */
      "contentId"?: string | undefined;

      /**
      * If `true`, the split pane will be hidden.
      */
      "disabled"?: boolean;

      /**
      * When the split-pane should be shown. Can be a CSS media query expression, or a shortcut expression. Can also be a boolean expression.
      */
      "when"?: boolean | string;

      /**
      * (event : { visible: boolean; }) => void :  Expression to be called when the split-pane visibility has changed
      */
      "on:ionSplitPaneVisible"?: (event: { visible: boolean; }) => void;
    }

    'ion-tab': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The component to display inside of the tab.
      */
      "component"?: Function | HTMLElement | null | string | undefined;

      /**
      * A tab id must be provided for each `ion-tab`. It's used internally to reference the selected tab or by the router to switch between them.
      */
      "tab"?: string;
    }

    'ion-tab-bar': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The selected tab component
      */
      "selectedTab"?: string | undefined;

      /**
      * If `true`, the tab bar will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;
    }

    'ion-tab-button': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the user cannot interact with the tab button.
      */
      "disabled"?: boolean;

      /**
      * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
      */
      "download"?: string | undefined;

      /**
      * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
      */
      "href"?: string | undefined;

      /**
      * Set the layout of the text and icon in the tab bar. It defaults to `'icon-top'`.
      */
      "layout"?: "icon-bottom" | "icon-end" | "icon-hide" | "icon-start" | "icon-top" | "label-hide" | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
      */
      "rel"?: string | undefined;

      /**
      * The selected tab component
      */
      "selected"?: boolean;

      /**
      * A tab id must be provided for each `ion-tab`. It's used internally to reference the selected tab or by the router to switch between them.
      */
      "tab"?: string | undefined;

      /**
      * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
      */
      "target"?: string | undefined;
    }

    'ion-tabs': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * (event : { tab: string; }) => void :  Emitted when the navigation has finished transitioning to a new component.
      */
      "on:ionTabsDidChange"?: (event: { tab: string; }) => void;

      /**
      * (event : { tab: string; }) => void :  Emitted when the navigation is about to transition to a new component.
      */
      "on:ionTabsWillChange"?: (event: { tab: string; }) => void;
    }

    'ion-text': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-textarea': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the textarea container will grow and shrink based on the contents of the textarea.
      */
      "autoGrow"?: boolean;

      /**
      * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user. Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
      */
      "autocapitalize"?: string;

      /**
      * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
      */
      "autofocus"?: boolean;

      /**
      * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
      */
      "clearOnEdit"?: boolean;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.
      */
      "cols"?: number | undefined;

      /**
      * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.
      */
      "debounce"?: number;

      /**
      * If `true`, the user cannot interact with the textarea.
      */
      "disabled"?: boolean;

      /**
      * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
      */
      "enterkeyhint"?: "done" | "enter" | "go" | "next" | "previous" | "search" | "send" | undefined;

      /**
      * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
      */
      "inputmode"?: "decimal" | "email" | "none" | "numeric" | "search" | "tel" | "text" | "url" | undefined;

      /**
      * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
      */
      "maxlength"?: number | undefined;

      /**
      * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
      */
      "minlength"?: number | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * Instructional text that shows before the input has a value.
      */
      "placeholder"?: string | undefined;

      /**
      * If `true`, the user cannot modify the value.
      */
      "readonly"?: boolean;

      /**
      * If `true`, the user must fill in a value before submitting a form.
      */
      "required"?: boolean;

      /**
      * The number of visible text lines for the control.
      */
      "rows"?: number | undefined;

      /**
      * If `true`, the element will have its spelling and grammar checked.
      */
      "spellcheck"?: boolean;

      /**
      * The value of the textarea.
      */
      "value"?: null | string | undefined;

      /**
      * Indicates how the control wraps text.
      */
      "wrap"?: "hard" | "off" | "soft" | undefined;

      /**
      * (event : FocusEvent) => void :  Emitted when the input loses focus.
      */
      "on:ionBlur"?: (event: FocusEvent) => void;

      /**
      * (event : TextareaChangeEventDetail) => void :  Emitted when the input value has changed.
      */
      "on:ionChange"?: (event: TextareaChangeEventDetail) => void;

      /**
      * (event : FocusEvent) => void :  Emitted when the input has focus.
      */
      "on:ionFocus"?: (event: FocusEvent) => void;

      /**
      * (event : InputEvent) => void :  Emitted when a keyboard input occurred.
      */
      "on:ionInput"?: (event: InputEvent) => void;
    }

    'ion-thumbnail': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;
    }

    'ion-title': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The size of the toolbar title.
      */
      "size"?: "large" | "small" | undefined;
    }

    'ion-toast': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the toast will animate.
      */
      "animated"?: boolean;

      /**
      * An array of buttons for the toast.
      */
      "buttons"?: (string | ToastButton)[] | undefined;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * Additional classes to apply for custom CSS. If multiple classes are provided they should be separated by spaces.
      */
      "cssClass"?: string | string[] | undefined;

      /**
      * How many milliseconds to wait before hiding the toast. By default, it will show until `dismiss()` is called.
      */
      "duration"?: number;

      /**
      * Animation to use when the toast is presented.
      */
      "enterAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * Header to be shown in the toast.
      */
      "header"?: string | undefined;

      /**
      * Additional attributes to pass to the toast.
      */
      "htmlAttributes"?: undefined | { [key: string]: any; };

      /**
      * The name of the icon to display, or the path to a valid SVG file. See `ion-icon`. https://ionic.io/ionicons
      */
      "icon"?: string | undefined;

      /**
      * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
      */
      "keyboardClose"?: boolean;

      /**
      * Animation to use when the toast is dismissed.
      */
      "leaveAnimation"?: ((baseEl: any, opts?: any) => Animation) | undefined;

      /**
      * Message to be shown in the toast.
      */
      "message"?: IonicSafeString | string | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The position of the toast on the screen.
      */
      "position"?: "bottom" | "middle" | "top";

      /**
      * If `true`, the toast will be translucent. Only applies when the mode is `"ios"` and the device supports [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
      */
      "translucent"?: boolean;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted after the toast has dismissed.
      */
      "on:ionToastDidDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted after the toast has presented.
      */
      "on:ionToastDidPresent"?: (event: void) => void;

      /**
      * (event : OverlayEventDetail<any>) => void :  Emitted before the toast has dismissed.
      */
      "on:ionToastWillDismiss"?: (event: OverlayEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted before the toast has presented.
      */
      "on:ionToastWillPresent"?: (event: void) => void;
    }

    'ion-toggle': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * If `true`, the toggle is selected.
      */
      "checked"?: boolean;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * If `true`, the user cannot interact with the toggle.
      */
      "disabled"?: boolean;

      /**
      * Enables the on/off accessibility switch labels within the toggle.
      */
      "enableOnOffLabels"?: boolean | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";

      /**
      * The name of the control, which is submitted with the form data.
      */
      "name"?: string;

      /**
      * The value of the toggle does not mean if it's checked or not, use the `checked` property for that.  The value of a toggle is analogous to the value of a `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
      */
      "value"?: null | string | undefined;

      /**
      * (event : void) => void :  Emitted when the toggle loses focus.
      */
      "on:ionBlur"?: (event: void) => void;

      /**
      * (event : ToggleChangeEventDetail<any>) => void :  Emitted when the value property has changed.
      */
      "on:ionChange"?: (event: ToggleChangeEventDetail<any>) => void;

      /**
      * (event : void) => void :  Emitted when the toggle has focus.
      */
      "on:ionFocus"?: (event: void) => void;
    }

    'ion-toolbar': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
      */
      "color"?: "danger" | "dark" | "light" | "medium" | "primary" | "secondary" | "success" | "tertiary" | "warning" | string & Record<never, never> | undefined;

      /**
      * The mode determines which platform styles to use.
      */
      "mode"?: "ios" | "md";
    }

    'ion-virtual-scroll': {

      /**
       * slots - See documentation for parent component on available slots
       */
      "slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

      "class"?: string | undefined;
      "style"?: string | undefined;
      "on:click"?: (ev?: any) => void;

      /**
      * The approximate width of each footer template's cell. This dimension is used to help determine how many cells should be created when initialized, and to help calculate the height of the scrollable area. This height value can only use `px` units. Note that the actual rendered size of each cell comes from the app's CSS, whereas this approximation is used to help calculate initial dimensions before the item has been rendered.
      */
      "approxFooterHeight"?: number;

      /**
      * The approximate height of each header template's cell. This dimension is used to help determine how many cells should be created when initialized, and to help calculate the height of the scrollable area. This height value can only use `px` units. Note that the actual rendered size of each cell comes from the app's CSS, whereas this approximation is used to help calculate initial dimensions before the item has been rendered.
      */
      "approxHeaderHeight"?: number;

      /**
      * It is important to provide this if virtual item height will be significantly larger than the default The approximate height of each virtual item template's cell. This dimension is used to help determine how many cells should be created when initialized, and to help calculate the height of the scrollable area. This height value can only use `px` units. Note that the actual rendered size of each cell comes from the app's CSS, whereas this approximation is used to help calculate initial dimensions before the item has been rendered.
      */
      "approxItemHeight"?: number;

      /**
      * Section footers and the data used within its given template can be dynamically created by passing a function to `footerFn`. The logic within the footer function can decide if the footer template should be used, and what data to give to the footer template. The function must return `null` if a footer cell shouldn't be created.
      */
      "footerFn"?: ((item: any, index: number, items: any[]) => string | null | undefined) | undefined;

      /**
      * An optional function that maps each item footer within their height.
      */
      "footerHeight"?: ((item: any, index: number) => number) | undefined;

      /**
      * Section headers and the data used within its given template can be dynamically created by passing a function to `headerFn`. For example, a large list of contacts usually has dividers between each letter in the alphabet. App's can provide their own custom `headerFn` which is called with each record within the dataset. The logic within the header function can decide if the header template should be used, and what data to give to the header template. The function must return `null` if a header cell shouldn't be created.
      */
      "headerFn"?: ((item: any, index: number, items: any[]) => string | null | undefined) | undefined;

      /**
      * An optional function that maps each item header within their height.
      */
      "headerHeight"?: ((item: any, index: number) => number) | undefined;

      /**
      * An optional function that maps each item within their height. When this function is provides, heavy optimizations and fast path can be taked by `ion-virtual-scroll` leading to massive performance improvements.  This function allows to skip all DOM reads, which can be Doing so leads to massive performance
      */
      "itemHeight"?: ((item: any, index: number) => number) | undefined;

      /**
      * The data that builds the templates within the virtual scroll. It's important to note that when this data has changed, then the entire virtual scroll is reset, which is an expensive operation and should be avoided if possible.
      */
      "items"?: any[] | undefined;

      /**
      * NOTE: only Vanilla JS API.
      */
      "nodeRender"?: ((el: HTMLElement | null, cell: Cell, domIndex: number) => HTMLElement) | undefined;

      /**
      * NOTE: only JSX API for stencil.  Provide a render function for the footer to be rendered. Returns a JSX virtual-dom.
      */
      "renderFooter"?: ((item: any, index: number) => any) | undefined;

      /**
      * NOTE: only JSX API for stencil.  Provide a render function for the header to be rendered. Returns a JSX virtual-dom.
      */
      "renderHeader"?: ((item: any, index: number) => any) | undefined;

      /**
      * NOTE: only JSX API for stencil.  Provide a render function for the items to be rendered. Returns a JSX virtual-dom.
      */
      "renderItem"?: ((item: any, index: number) => any) | undefined;
    }

  }
}
