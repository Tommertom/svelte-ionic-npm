// todo - using https://unpkg.com/@ionic/docs@6.3.8/core.json
const fs = require("fs");

// load static
const coreJson = require("./core.json"); // 6.3.8 downloaded

const defaultDefinitions = `
/**
 * slots - See documentation for parent component on available slots
 */
"slot"?: string | undefined; // this is a hack - help needed, how to type slots properly

"class"?:string | undefined;
"style"?:string | undefined;
"on:click"? : (ev?:any) => void;
`;

const doStuff = () => {
  var dir = "./generated";

  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }

  const { components } = coreJson;

  console.log('Component count', components.length);

  let typingOutput = `
  // Generated by scripts/generate_ionicsvelte_typings.js
  declare namespace svelte.JSX {

    interface IntrinsicElements {
      
  `;

  components
    // .filter(component => component.tag == 'ion-input')
    .forEach(component => {
      const { props, events } = component;

      // if (props.length > 0) {
      // pre-amble of this tag
      console.log('Processing ', component.tag)
      typingOutput = typingOutput + `'${component.tag}': {
      `;

      // slots support
      typingOutput = typingOutput + defaultDefinitions;

      // let's dump the props
      console.log('has props', props);
      props.forEach(prop => {

        //   "disabled"?: boolean;
        typingOutput = typingOutput + `
          /**
          * ${prop.docs.replace(/\n/g, ' ')}
          */
          "${prop.name}"?: ${prop.type};
        `;
      })

      // let's dump the events
      console.log('has props', events);
      events.forEach(event => {

        //     "on:ionSlideReachEnd"?: () => void;
        typingOutput = typingOutput + `
              /**
              * (event : ${event.detail}) => void :  ${event.docs.replace(/\n/g, ' ')}
              */
              "on:${event.event}"?: (event : ${event.detail}) => void;
            `;
      })

      // close definition
      typingOutput = typingOutput + `}

  `;
      //   }
    });

  typingOutput = typingOutput + `    }
  }
    `;

  // console.log('Typings output', typingOutput)

  fs.writeFile(
    "../index.d.ts",
    typingOutput,
    function (err) {
      if (err) return console.log(err);
    }
  );

};

doStuff();
