// todo - using https://unpkg.com/@ionic/docs@6.3.8/core.json
const fs = require("fs");

// load static
const coreJson = require("./core.json"); // 6.3.8 downloaded

// const axios = require('axios');

// axios.get('https://unpkg.com/@ionic/doc/core.json',
//   {
//     timeout: 1000
//   }).then(function (response) {
//     // handle success
//     console.log(response);
//   })



// const request = require('request');

// request('https://unpkg.com/@ionic/docs@6.3.8/core.json', { json: true }, (err, res, body) => {
//   if (err) { return console.log(err); }
//   console.log(body.url);
//   console.log(body.explanation);
// });

// const https = require('https');

// https.get('https://unpkg.com/@ionic/docs@6.3.8/core.json', (resp) => {
//   let data = '';

//   // A chunk of data has been received.
//   resp.on('data', (chunk) => {
//     data += chunk;
//   });

//   // The whole response has been received. Print out the result.
//   resp.on('end', () => {
//     console.log(JSON.parse(data).explanation);
//   });

// }).on("error", (err) => {
//   console.log("Error: " + err.message);
// });




const defaultDefinitions = `
/**
 * slots - See documentation for parent component on available slots
 */
"slot"?: string | undefined; 

"class"?:string | undefined;
"style"?:string | undefined;

"on:click"? : (ev?:Event) => void;
"on:focus"?: (ev?: Event) => void;
"on:blur"?: (ev?: Event) => void;
"on:fullscreenchange"?: (ev?: Event) => void;
"on:fullscreenerror"?: (ev?: Event) => void;
"on:scroll"?: (ev?: Event) => void;
"on:cut"?: (ev?: Event) => void;
"on:copy"?: (ev?: Event) => void;
"on:paste"?: (ev?: Event) => void;
"on:keydown"?: (ev?: Event) => void;
"on:keypress"?: (ev?: Event) => void;
"on:keyup"?: (ev?: Event) => void;
"on:auxclick"?: (ev?: Event) => void;
"on:contextmenu"?: (ev?: Event) => void;
"on:dblclick"?: (ev?: Event) => void;
"on:mousedown"?: (ev?: Event) => void;
"on:mouseenter"?: (ev?: Event) => void;
"on:mouseleave"?: (ev?: Event) => void;
"on:mousemove"?: (ev?: Event) => void;
"on:mouseover"?: (ev?: Event) => void;
"on:mouseout"?: (ev?: Event) => void;
"on:mouseup"?: (ev?: Event) => void;
"on:pointerlockchange"?: (ev?: Event) => void;
"on:pointerlockerror"?: (ev?: Event) => void;
"on:select"?: (ev?: Event) => void;
"on:wheel"?: (ev?: Event) => void;
"on:drag"?: (ev?: Event) => void;
"on:dragend"?: (ev?: Event) => void;
"on:dragenter"?: (ev?: Event) => void;
"on:dragstart"?: (ev?: Event) => void;
"on:dragleave"?: (ev?: Event) => void;
"on:dragover"?: (ev?: Event) => void;
"on:drop"?: (ev?: Event) => void;
"on:touchcancel"?: (ev?: Event) => void;
"on:touchend"?: (ev?: Event) => void;
"on:touchmove"?: (ev?: Event) => void;
"on:touchstart"?: (ev?: Event) => void;
"on:pointerover"?: (ev?: Event) => void;
"on:pointerenter"?: (ev?: Event) => void;
"on:pointerdown"?: (ev?: Event) => void;
"on:pointermove"?: (ev?: Event) => void;
"on:pointerup"?: (ev?: Event) => void;
"on:pointercancel"?: (ev?: Event) => void;
"on:pointerout"?: (ev?: Event) => void;
"on:pointerleave"?: (ev?: Event) => void;
"on:gotpointercapture"?: (ev?: Event) => void;
"on:lostpointercapture"?: (ev?: Event) => void;
`;

const doStuff = () => {
  var dir = "./generated";

  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }

  const { components } = coreJson;

  console.log('Component count', components.length);

  let typingOutput = `
  // Generated by scripts/generate_ionicsvelte_typings.js
  // need to merge some more stuff from https://github.com/sveltejs/language-tools/blob/master/packages/svelte2tsx/svelte-jsx.d.ts in here
  declare namespace svelte.JSX {

    interface IntrinsicElements {
      
  `;

  components
    //  .filter(component => component.tag == 'ion-button')
    .forEach(component => {
      const { props, events } = component;

      const tagWithoutIon = component.tag.replace('ion-', '');
      // const tagCapitalFirstLetter = tagWithoutIon.charAt(0).toUpperCase() + tagWithoutIon.slice(1);

      // if (props.length > 0) {
      // pre-amble of this tag
      console.log('Processing ', component.tag)
      typingOutput = typingOutput + `
  /**
   * ${component.tag}
   * More info: https://ionicframework.com/docs/api/${tagWithoutIon}
   */    
  '${component.tag}': {
      `;

      // slots support
      typingOutput = typingOutput + defaultDefinitions;

      // let's dump the props
      console.log('has props', props);
      props.forEach(prop => {

        //   "disabled"?: boolean;
        typingOutput = typingOutput + `
          /**
          * ${prop.docs.replace(/\n/g, ' ')}
          * API info: https://ionicframework.com/docs/api/${tagWithoutIon}#${prop.name}
          */
          "${prop.name}"?: ${prop.type};
        `;
      })

      // let's dump the events
      console.log('has props', events);
      events.forEach(event => {

        //     "on:ionSlideReachEnd"?: () => void;
        typingOutput = typingOutput + `
              /**
              * (event : ${event.detail}) => void :  ${event.docs.replace(/\n/g, ' ')}
              */
              "on:${event.event}"?: (event : ${event.detail}) => void;
            `;
      })

      // close definition
      typingOutput = typingOutput + `}

  `;
      //   }
    });

  typingOutput = typingOutput + `    }
  }
    `;

  // console.log('Typings output', typingOutput)

  fs.writeFile(
    "../index.d.ts",
    typingOutput,
    function (err) {
      if (err) return console.log(err);
    }
  );


  // create the module imports
  let allImportsCode = ``;
  components
    // .filter(component => component.tag == 'ion-input')
    .forEach(component => {
      const { tag } = component;
      const componentCode = `import { defineCustomElement } from '@ionic/core/components/${tag}';\ndefineCustomElement();`;

      allImportsCode = allImportsCode + `import 'ionic-svelte/components/${tag}';\n`;

      fs.writeFile(
        `../components/${tag}.js`,
        componentCode,
        function (err) {
          if (err) return console.log(err);
        }

      );
    })

  // all code imports
  fs.writeFile(
    `../components/all.js`,
    allImportsCode,
    function (err) {
      if (err) return console.log(err);
    }
  );
};

doStuff();
